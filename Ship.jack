/**
 * Ship and movement. Visual collision detection based
 * on rendered terrain pixels.
 */

class Ship {

  field int grav, thrust, friction;  // forces

  field int x, y;         // screen position
  field int vX, vY;       // velocities
  field int size;         // ship diameter

  field Array bitMask;    // for checking screen px for hit detection
  field int fuel;         // remaining fuel
  field bool hitFlag;     // currently hitting terrain?
  field bool landed;      // currently landed safely

  field int thrustDir;    // for
  field bool thrustLen;   // drawing
  field WichmannHill rng; // thrust

  field MarsGame game;   // to call methods in the game class

  constructor Ship new(int startY, MarsGame g) {
    var int i; // for setting up the bit mask array

    // ship properties
    let x = 80;
    let y = startY - 4;
    let size = 8;
    let fuel = 200;
    let hitFlag = false;
    let landed = true;
    let game = g;

    // physics properties
    let grav = 3;
    let thrust = 8;
    let friction = 1;

    // init rng for drawing thrust
    let rng = WichmannHill.new(23, 7666, 489);
    do rng.setMax(3);

    // init and populate bit mask array
    let i = 0;
    let bitMask = Array.new(16);
    let bitMask[0] = 1;
    while (i < 15) {
      let bitMask[i+1] = bitMask[i] * 2;
      let i = i + 1;
    }

    return this;
  }

  /** Update ship position based on forces and player input. */
  method void update(char key) {
    let thrustDir = 0;
    if (key = 131) {                        // upward thrust
      if (fuel > 0) {
        let thrustDir = 2;
        let vY = vY - thrust;
        if (vY < -100) { let vY = -100; }
        let fuel = fuel - 1;
      }
    } else {                                // gravity
      let vY = vY + grav;
      if (vY > 100) { let vY = 100; }
    }

    if (fuel > 0) {
      if (key = 130) {                      // left thrust
        let thrustDir = 1;
        let vX = vX - thrust;
        if (vX < -100) { let vX = -100; }
        let fuel = fuel - 1;
      } else {
        if (key = 132) {                    // right thrust
          let thrustDir = 3;
          let vX = vX + thrust;
          if (vX > 100) { let vX = 100; }
          let fuel = fuel - 1;
        } else {                            // friction slows lateral velocity
          if (vX < 0) {
            let vX = vX + friction;
          } 
          if (vX > 0) {
            let vX = vX - friction;
          }
        }
      }
    }

    let y = y + (vY/20);
    let x = x + (vX/20);

    do forceBounds();   // keep on screen
    do hitTest();       // check updated position for collision

    return;
  }

  method void forceBounds() {
    if (x < 4) {
      let x = 4;
      let vX = 0;
    }
    if (x > 507) {
      let x = 507;
      let vX = 0;
    }
    if (y < 4) {
      let y = 4;
      let vY = 0;
    }
    return;
  }

  method int getFuel() {
    return fuel;
  }

  method bool getLanded() {
    return landed;
  }

  method void addFuel(int amount) {
    let fuel = fuel + amount;
    if (fuel > 200) {
      let fuel = 200;
    }
    return;
  }

  /** Draw thrust lines. */
  method void drawThrust(int dir) {
    var int tX, tY;
    var int len;
    var int rand;
    let tX = x;
    let tY = y;
    if (thrustLen) {
      let len = 10;
    } else {
      let len = 12;
    }
    let thrustLen = ~thrustLen;
    let rand = rng.next();
    do Screen.setColor(false);
    if (thrustDir = 1) {
      let tX = x + len;
      if (tX > 507) { let tX = 507; }
      do Screen.drawLine(x, y, tX, tY + 2 + rand);
      do Screen.drawLine(x, y, tX, tY - 2 - rand);
    }
    if (thrustDir = 2) {
      let tY = y + len;
      do Screen.drawLine(x, y, tX + 2 + rand, tY);
      do Screen.drawLine(x, y, tX - 2 - rand, tY);
    }
    if (thrustDir = 3) {
      let tX = x - len;
      if (tX < 0) { let tX = 0; }
      do Screen.drawLine(x, y, tX, tY + 2 + rand);
      do Screen.drawLine(x, y, tX, tY - 2 - rand);
    }
    return;
  }

  method bool getHitFlag() {
    return hitFlag;
  }

  /** Reset properties to initial values for new game. */
  method void reset(int spawnY) {
      let x = 80;
      let y = spawnY - 4;
      let vX = 0;
      let vY = 0;
      let hitFlag = false;
      let fuel = 200;
      return;
  }

  /** Check bottom row of pixels for collision */
  method bool hitTest() {
    var int x1, x2, y1;
    let x1 = x - (size/2); // left x
    let x2 = x + (size/2); // right x
    let y1 = y + (size/2); // bottom y
    let landed = false;
    while (x1 < x2) {                                             // for each pixel...
      if (getPixel(x1, y1) = true) {                              // if it's white...
        if (~((x > 64) & (x < 96)) & ~((x > 416) & (x < 448))) {  // and you're outside the landing area
          let hitFlag = true;
          return true;
        } else {                  // otherwise, you're hitting a landing pad.
          if (vY > 50) {          // if you're landing to quickly, crash.
            let hitFlag = true;
            return true;
          } else {                // otherwise, kill momentum and (potentially) score.
            if (vY > 0) {
              let vY = 0;
              let vX = 0;
              let landed = true;
              do game.score();
            }
          }
        }
      }
      let x1 = x1 + 1;
    }
    let hitFlag = false;         // no collision detected
    return false;
  }

  method int getVY() {
    return vY;
  }

  method int getVX() {
    return vX;
  }

  method int getX() {
    return x;
  }

  /** Check the value of a specific pixel using bit-mask */
  method bool getPixel(int pX, int pY) {
    var int addr;
    var int word;
    var int m;
    var bool result;

    let result = true;
    let addr = 16384 + (32*pY) + (pX/16);
    let word = Memory.peek(addr);
    let word = ~word;   // negate as we're checking for white pixels
    let m = pX / 16;
    let m = pX - (m*16);
    if (word & bitMask[m] = 0) {
      let result = false;
    }
    return result;
  }

  /** Draw the ship and thrust */
  method void draw(bool col) {
    do Screen.setColor(col);
    do Screen.drawCircle(x, y, size/2);
    if (thrustDir > 0) {
      do drawThrust(thrustDir);
    }
    do Screen.setColor(~col);
    do Screen.drawCircle(x, y, size/4);
    do Screen.setColor(col);
    return;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}
