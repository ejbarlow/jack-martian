class Ship {

  field int x, y;
  field int vX, vY;
  field int size;
  field int grav;
  field int thrust;
  field int friction;
  field Array twoTo;
  field int factor;

  constructor Ship new() {
    var int i;

    let x = 256;
    let y = 10;
    let size = 8;
    let grav = 1;
    let thrust = 2;
    let friction = 1;
    let factor = 5;
    let i = 0;

    let twoTo = Array.new(16);
    let twoTo[0] = 1;
    while (i < 15) {
      let twoTo[i+1] = twoTo[i] * 2;
      let i = i + 1;
    }

    return this;
  }

  method void update() {
    var char key;
    let key = Keyboard.keyPressed();
    if (key = 131) {
      let vY = vY - thrust;
      if (vY < -10) { let vY = -10; }
    } else {
      let vY = vY + grav;
      if (vY > 10) { let vY = 10; }
    }

    if (key = 130) {
      let vX = vX - thrust;
      if (vX < -10) { let vX = -10; }
    }
    if (key = 132) { 
      let vX = vX + thrust;
      if (vX > 10) { let vX = 10; }
    }

    if(~(key = 130) & ~(key = 132)) {
      if (vX < 0) {
        let vX = vX + friction;
      } 
      if (vX > 0) {
        let vX = vX - friction;
      }
    }

    let y = y + (vY/factor);
    let x = x + (vX/factor);
    if (hitTest() = true) {
      // do Sys.error(789);  
      let y = 10;
    }
    return;
  }

  method bool hitTest() {
    var int x1, x2, y1;
    let x1 = x - (size/2);
    let x2 = x + (size/2);
    let y1 = y + (size/2);
    while (x1 < x2) {
      if (getPixel(x1, y1) = true) {
        return true;
      }
      let x1 = x1 + 1;
    }
    return false;
  }

  method bool getPixel(int pX, int pY) {
    var int addr;
    var int word;
    var int m;
    var bool result;

    let result = true;
    let addr = 16384 + (32*pY) + (pX/16);
    let word = Memory.peek(addr);
    let word = ~word;
    let m = pX / 16;
    let m = pX - (m*16);
    if (word & twoTo[m] = 0) {
      let result = false;
    }
    return result;
  }

  method void draw(bool col) {
    do Screen.setColor(col);
    do Screen.drawRectangle(x - (size/2), y - (size/2), x + (size/2), y + (size/2));
    return;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}
