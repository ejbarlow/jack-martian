function Ship.new 1
push constant 13
call Memory.alloc 1
pop pointer 0
push constant 80
pop this 0
push argument 0
push constant 4
sub
pop this 1
push constant 8
pop this 4
push constant 3
pop this 5
push constant 5
pop this 6
push constant 1
pop this 7
push constant 0
pop local 0
push constant 0
pop this 9
push constant 23
push constant 7666
push constant 489
call WichmannHill.new 3
pop this 12
push this 12
push constant 2
call WichmannHill.setMax 2
pop temp 0
push constant 16
call Array.new 1
pop this 8
push constant 0
push this 8
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label WHILE_EXP0
push local 0
push constant 15
lt
not
if-goto WHILE_END0
push local 0
push constant 1
add
push this 8
add
push local 0
push this 8
add
pop pointer 1
push that 0
push constant 2
call Math.multiply 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Ship.update 0
push argument 0
pop pointer 0
push constant 0
pop this 10
push argument 1
push constant 131
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 2
pop this 10
push this 3
push this 6
sub
pop this 3
push this 3
push constant 100
neg
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 100
neg
pop this 3
label IF_FALSE1
goto IF_END0
label IF_FALSE0
push this 3
push this 5
add
pop this 3
push this 3
push constant 100
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 100
pop this 3
label IF_FALSE2
label IF_END0
push argument 1
push constant 130
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
pop this 10
push this 2
push this 6
sub
pop this 2
push this 2
push constant 100
neg
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 100
neg
pop this 2
label IF_FALSE4
goto IF_END3
label IF_FALSE3
push argument 1
push constant 132
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 3
pop this 10
push this 2
push this 6
add
pop this 2
push this 2
push constant 100
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 100
pop this 2
label IF_FALSE6
goto IF_END5
label IF_FALSE5
push this 2
push constant 0
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push this 2
push this 7
add
pop this 2
label IF_FALSE7
push this 2
push constant 0
gt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push this 2
push this 7
sub
pop this 2
label IF_FALSE8
label IF_END5
label IF_END3
push this 1
push this 3
push constant 20
call Math.divide 2
add
pop this 1
push this 0
push this 2
push constant 20
call Math.divide 2
add
pop this 0
push pointer 0
call Ship.hitTest 1
pop temp 0
push constant 0
return
function Ship.drawThrust 4
push argument 0
pop pointer 0
push this 0
pop local 0
push this 1
pop local 1
push this 11
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 8
pop local 2
goto IF_END0
label IF_FALSE0
push constant 10
pop local 2
label IF_END0
push this 11
not
pop this 11
push this 12
call WichmannHill.next 1
pop local 3
push constant 0
call Screen.setColor 1
pop temp 0
push this 10
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 0
push local 2
add
pop local 0
push this 0
push this 1
push local 0
push local 1
push local 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push local 0
push local 1
push local 3
sub
call Screen.drawLine 4
pop temp 0
label IF_FALSE1
push this 10
push constant 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 1
push local 2
add
pop local 1
push this 0
push this 1
push local 0
push local 3
add
push local 1
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push local 0
push local 3
sub
push local 1
call Screen.drawLine 4
pop temp 0
label IF_FALSE2
push this 10
push constant 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 0
push local 2
sub
pop local 0
push this 0
push this 1
push local 0
push local 1
push local 3
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push local 0
push local 1
push local 3
sub
call Screen.drawLine 4
pop temp 0
label IF_FALSE3
push constant 0
return
function Ship.getHitFlag 0
push argument 0
pop pointer 0
push this 9
return
function Ship.reset 0
push argument 0
pop pointer 0
push constant 10
pop this 1
push constant 0
pop this 9
push constant 0
return
function Ship.hitTest 3
push argument 0
pop pointer 0
push this 0
push this 4
push constant 2
call Math.divide 2
sub
pop local 0
push this 0
push this 4
push constant 2
call Math.divide 2
add
pop local 1
push this 1
push this 4
push constant 2
call Math.divide 2
add
pop local 2
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
push local 2
call Ship.getPixel 3
push constant 0
not
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push constant 64
gt
push this 0
push constant 96
lt
and
not
push this 0
push constant 416
gt
push this 0
push constant 448
lt
and
not
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
pop this 9
push constant 0
not
return
goto IF_END1
label IF_FALSE1
push this 3
push constant 50
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
pop this 9
push constant 0
not
return
goto IF_END2
label IF_FALSE2
push this 3
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop this 3
label IF_FALSE3
label IF_END2
label IF_END1
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop this 9
push constant 0
return
function Ship.getVY 0
push argument 0
pop pointer 0
push this 3
return
function Ship.getPixel 4
push argument 0
pop pointer 0
push constant 0
not
pop local 3
push constant 16384
push constant 32
push argument 2
call Math.multiply 2
add
push argument 1
push constant 16
call Math.divide 2
add
pop local 0
push local 0
call Memory.peek 1
pop local 1
push local 1
not
pop local 1
push argument 1
push constant 16
call Math.divide 2
pop local 2
push argument 1
push local 2
push constant 16
call Math.multiply 2
sub
pop local 2
push local 1
push local 2
push this 8
add
pop pointer 1
push that 0
and
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 3
label IF_FALSE0
push local 3
return
function Ship.draw 0
push argument 0
pop pointer 0
push argument 1
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push this 4
push constant 2
call Math.divide 2
call Screen.drawCircle 3
pop temp 0
push this 10
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push this 10
call Ship.drawThrust 2
pop temp 0
label IF_FALSE0
push constant 0
return
function Ship.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
