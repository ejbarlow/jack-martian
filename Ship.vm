function Ship.new 0
push constant 9
call Memory.alloc 1
pop pointer 0
push constant 256
pop this 0
push constant 10
pop this 1
push constant 8
pop this 4
push constant 1
pop this 5
push constant 2
pop this 6
push constant 1
pop this 7
push constant 16
call Array.new 1
pop this 8
push constant 0
push this 8
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 8
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 8
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 8
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push this 8
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push this 8
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push this 8
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push this 8
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push this 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push this 8
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push this 8
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push this 8
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push this 8
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push this 8
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push this 8
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push this 8
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push pointer 0
return
function Ship.update 1
push argument 0
pop pointer 0
call Keyboard.keyPressed 0
pop local 0
push local 0
push constant 131
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 3
push this 6
sub
pop this 3
push this 3
push constant 10
neg
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 10
neg
pop this 3
label IF_FALSE1
goto IF_END0
label IF_FALSE0
push this 3
push this 5
add
pop this 3
push this 3
push constant 10
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 10
pop this 3
label IF_FALSE2
label IF_END0
push local 0
push constant 130
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 2
push this 6
sub
pop this 2
push this 2
push constant 10
neg
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 10
neg
pop this 2
label IF_FALSE4
label IF_FALSE3
push local 0
push constant 132
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push this 2
push this 6
add
pop this 2
push this 2
push constant 10
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 10
pop this 2
label IF_FALSE6
label IF_FALSE5
push local 0
push constant 130
eq
not
push local 0
push constant 132
eq
not
and
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push this 2
push constant 0
lt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push this 2
push this 7
add
pop this 2
label IF_FALSE8
push this 2
push constant 0
gt
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push this 2
push this 7
sub
pop this 2
label IF_FALSE9
label IF_FALSE7
push this 1
push this 3
push constant 2
call Math.divide 2
add
pop this 1
push this 0
push this 2
push constant 2
call Math.divide 2
add
pop this 0
push pointer 0
call Ship.hitTest 1
push constant 0
not
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 789
call Sys.error 1
pop temp 0
label IF_FALSE10
push constant 0
return
function Ship.hitTest 3
push argument 0
pop pointer 0
push this 0
push this 4
push constant 2
call Math.divide 2
sub
pop local 0
push this 0
push this 4
push constant 2
call Math.divide 2
add
pop local 1
push this 1
push this 4
push constant 2
call Math.divide 2
add
pop local 2
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
push local 2
call Ship.getPixel 3
push constant 0
not
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Ship.getPixel 4
push argument 0
pop pointer 0
push constant 0
not
pop local 3
push constant 16384
push constant 32
push argument 2
call Math.multiply 2
add
push argument 1
push constant 16
call Math.divide 2
add
pop local 0
push local 0
call Memory.peek 1
pop local 1
push local 1
not
pop local 1
push argument 1
push constant 16
call Math.divide 2
pop local 2
push argument 1
push local 2
push constant 16
call Math.multiply 2
sub
pop local 2
push constant 16
push local 2
sub
pop local 2
push local 1
push local 2
push this 8
add
pop pointer 1
push that 0
and
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 3
label IF_FALSE0
push local 3
return
function Ship.draw 0
push argument 0
pop pointer 0
push argument 1
call Screen.setColor 1
pop temp 0
push this 0
push this 4
push constant 2
call Math.divide 2
sub
push this 1
push this 4
push constant 2
call Math.divide 2
sub
push this 0
push this 4
push constant 2
call Math.divide 2
add
push this 1
push this 4
push constant 2
call Math.divide 2
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Ship.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
