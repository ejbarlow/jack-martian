class LunarGame {
  field Terrain t;
  field Ship s;
  field boolean exit;
  field int score;

  constructor LunarGame new() {
    let exit = false;
    return this;
  }

  method void dispose() {
    do t.dispose();
    do s.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void init() {
    var char key;
    var int seed;

    do Output.printString("Press any key...");

    while (key = 0) {
      let key = Keyboard.keyPressed();
      let seed = seed + 1;
      if (seed > 30000) { let seed = 0 ;}
    }
    let t = Terrain.new(seed);
    let s = Ship.new(t.getStartHeight(), this);
    do Screen.setColor(true);
    do Screen.drawRectangle(0, 0, 511, 255);
    do t.draw();
    return;
  }

  method void run() {
    var char key;
    while (~(exit)) {
      let key = Keyboard.keyPressed();
      if (key = 140) {
        let exit = true;
      } else {
        do loop(key);
      }
    }
    return;
  }

  method void score() {
    var int sX;
    let sX = s.getX();
    if (~t.isReturnTrip()) {
      if ((sX > 64) & (sX < 96)) {
        do t.newHeights();
        do s.addFuel(50);
        let score = score + 1;
      }
    } else {
      if ((sX > 416) & (sX < 448)) {
        do t.newHeights();
        do s.addFuel(50);
        let score = score + 1;
      }
    }
    return;
  }

  method void loop(char keyCode) {
    do Screen.setColor(true);
    do Screen.drawRectangle(0, 0, 511, 255);
    do t.draw();
    do s.update(keyCode);
    if (s.getHitFlag() = true) {
      do s.reset();
      do t.newHeights();
    } else {
      do s.draw(false);
    }
    do Output.moveCursor(22, 1);
    do Output.printString("Score: ");
    do Output.printInt(score);
    do Output.moveCursor(22, 20);
    do Output.printString("Fuel: ");
    do Output.printInt(s.getFuel());
    do Sys.wait(100);
    return;
  }
}
