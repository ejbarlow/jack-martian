/**
 * Generates and draws pseudorandom terrain with landing areas.
 */

class Terrain {
  field WichmannHill rng; // pseudo rng
  field int baseHt;
  field Array heights;
  field boolean rtnTrip;  // toggle for which landing pad is the destination

  constructor Terrain new(int seed) {
    let heights = Array.new(17);
    let rng = WichmannHill.new(seed, seed / 2, seed / 3);
    let baseHt = 200;
    let heights[2] = baseHt;
    let heights[3] = baseHt;
    let rtnTrip = false;
    do rng.setMax(100);
    do newHeights();
    return this;
  }

  /** Re-roll terrain (excl. where the ship is currently landed) */
  method void newHeights() {
    var int n;
    let n = 0;
    while (n < 17) {
      if ((~(rtnTrip) & ~(n=2) & ~(n=3)) | ((rtnTrip) & ~(n=12) & ~(n=13))) { // keep the height at the latest destination
        if ((n = 3) | (n = 14)) {
          let heights[n] = heights[n - 1]; // keep landing areas flat
        } else {
          if (n > 0) {
            let heights[n] = heights[n - 1] + 50 - rng.next();
          } else {
            let heights[n] = baseHt - rng.next();
          }
          if (heights[n] < 20) {
            let heights[n] = 20;
          } else {
            if (heights[n] > 220) { let heights[n] = 220; }
          }
        }
      }
      let n = n + 1;
    }
    let rtnTrip = ~rtnTrip;
    return;
  }

  method void resetTrip() {
    let rtnTrip = false;
    return;
  }

  method boolean isReturnTrip() {
    return rtnTrip;
  }

  /** Draw main terrain elevation */
  method void draw() {
    var int i;
    let i = 0;
    do Screen.setColor(false);
    while (i < 16) {
      if (~(i = 2) & ~(i = 13)) {
        do Screen.drawLine(i * 32, heights[i], ((i + 1) * 32) - 1, heights[i + 1]);
        do Screen.drawLine(i * 32, heights[i] + 3, ((i + 1) * 32) - 1, heights[i + 1] + 3);
        do Screen.drawLine(i * 32, heights[i] + 6, ((i + 1) * 32) - 1, heights[i + 1] + 6);
        do Screen.drawLine(i * 32, heights[i] + 9, ((i + 1) * 32) - 1, heights[i + 1] + 9);
        do Screen.drawLine(i * 32, heights[i] + 12, ((i + 1) * 32) - 1, heights[i + 1] + 12);
      }
      let i = i + 1;
    }
    do drawLandings();
    return;
  }

  /** Draw the landing areas */
  method void drawLandings() {
    do Screen.drawLine(64, heights[2], 96, heights[2]);
    do Screen.drawRectangle(65, heights[2] + 2, 95, heights[2] + 12);

    do Screen.drawLine(416, heights[13], 448, heights[13]);
    do Screen.drawRectangle(417, heights[13] + 2, 447, heights[13] + 12);

    do Screen.setColor(true);
    do Screen.drawCircle(88, heights[2] + 9, 3);
    do Screen.drawCircle(440, heights[13] + 9, 3);
    do Screen.setColor(false);
    do Screen.drawCircle(88, heights[2] + 9, 2);
    do Screen.drawCircle(440, heights[13] + 9, 2);
    return;
  }

  method void drawFlag() {
    if (~rtnTrip) {
      do Screen.drawLine(68, heights[2], 68, heights[2] - 10);
      do Screen.drawLine(68, heights[2] - 10, 72, heights[2] - 8);
      do Screen.drawLine(68, heights[2] - 6, 72, heights[2] - 8);
    } else {
      do Screen.drawLine(420, heights[13], 420, heights[13] - 10);
      do Screen.drawLine(420, heights[13] - 10, 424, heights[13] - 8);
      do Screen.drawLine(420, heights[13] - 6, 424, heights[13] - 8);
    }
    return;
  }

  method int getStartHeight() {
    return heights[2];
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}
